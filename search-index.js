var N = null;var searchIndex = {};
searchIndex["rust_testing"]={"doc":"","items":[[4,"Message","rust_testing","Sample enum to show all the possible variants",N,N],[13,"Quit","","",0,N],[13,"Move","","",0,N],[12,"x","rust_testing::Message","",0,N],[12,"y","","",0,N],[13,"Write","rust_testing","",0,N],[13,"ChangeColor","","",0,N],[5,"main","","",N,[[]]],[5,"guessing","","Guessing game code, based on the one from the Rust book",N,[[]]],[5,"enum_test","","Function to test out enums",N,[[]]],[5,"enum_match","","Function to test matching enums",N,[[["message"]]]],[5,"option_test","","Function to test the Option enum",N,[[]]],[5,"print_string","","Function to test matching Option",N,[[["option"]],["bool"]]],[11,"print_variant","","Sample method implementation for an enum/struct",0,[[["self"],["bool"]]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]]],"paths":[[4,"Message"]]};
initSearch(searchIndex);addSearchOptions(searchIndex);
